// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int           @id @default(autoincrement())
  name          String
  email         String        @unique
  username      String        @unique
  password      String
  phone         String        @unique
  zakats        Zakat[]
  donations     Donation[]
  mosques       Mosque[]
  helpRequests  HelpRequest[]
  role          Role          @relation(fields: [roleId], references: [id])
  roleId        Int
  updatedNisabs Nisab[]       @relation("updatedByUser")
}

model Zakat {
  id             Int         @id @default(autoincrement())
  value          Decimal?
  collectionDate DateTime
  location       String?
  userId         Int
  user           User        @relation(fields: [userId], references: [id])
  items          ZakatItem[]
}

model ZakatItem {
  id       Int    @id @default(autoincrement())
  itemName String @unique
  quantity Int
  zakatId  Int
  zakat    Zakat  @relation(fields: [zakatId], references: [id])
}

model Donation {
  id           Int      @id @default(autoincrement())
  amount       Decimal
  donationDate DateTime
  userId       Int
  user         User     @relation(fields: [userId], references: [id])
}

model Nisab {
  id             Int      @id @default(autoincrement())
  amount         Decimal
  lastUpdateDate DateTime
  updatedById    Int
  updatedByUser  User     @relation("updatedByUser", fields: [updatedById], references: [id])
}

model HelpRequest {
  id             Int      @id @default(autoincrement())
  requestDetails String
  reason         String?
  approvalStatus Boolean
  postingDate    DateTime
  userId         Int
  user           User     @relation(fields: [userId], references: [id])
}

model Mosque {
  id            Int    @id @default(autoincrement())
  createdBy     Int
  name          String @unique
  location      String
  contactNumber String @unique
  contactPerson String
  imam          String
  createdByUser User   @relation(fields: [createdBy], references: [id])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  users       User[] // Add the missing opposite relation field
  permissions Permission[]
}

model Permission {
  id    Int    @id @default(autoincrement())
  name  String @unique
  roles Role[] // Add the missing opposite relation field
}
